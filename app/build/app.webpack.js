/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/backbone.marionette/lib/backbone.marionette.esm.js":
/*!*************************************************************************!*\
  !*** ./node_modules/backbone.marionette/lib/backbone.marionette.esm.js ***!
  \*************************************************************************/
/*! exports provided: bindEvents, unbindEvents, bindRequests, unbindRequests, mergeOptions, getOption, normalizeMethods, triggerMethod, setDomApi, setRenderer, View, CollectionView, MnObject, Region, Behavior, Application, isEnabled, setEnabled, monitorViewEvents, Events, extend, DomApi, VERSION, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindEvents\", function() { return bindEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unbindEvents\", function() { return unbindEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindRequests\", function() { return bindRequests; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unbindRequests\", function() { return unbindRequests; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mergeOptions\", function() { return mergeOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getOption\", function() { return getOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalizeMethods\", function() { return normalizeMethods; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerMethod\", function() { return triggerMethod$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setDomApi\", function() { return setDomApi; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setRenderer\", function() { return setRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"View\", function() { return View; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CollectionView\", function() { return CollectionView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MnObject\", function() { return MarionetteObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Region\", function() { return Region; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Behavior\", function() { return Behavior; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Application\", function() { return Application; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEnabled\", function() { return isEnabled; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEnabled\", function() { return setEnabled; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"monitorViewEvents\", function() { return monitorViewEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Events\", function() { return Events; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extend\", function() { return extend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomApi\", function() { return DomApi; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return version; });\n/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! backbone */ \"backbone\");\n/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! underscore */ \"underscore\");\n/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(underscore__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var backbone_radio__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! backbone.radio */ \"backbone.radio\");\n/* harmony import */ var backbone_radio__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(backbone_radio__WEBPACK_IMPORTED_MODULE_2__);\n/**\n* @license\n* MarionetteJS (Backbone.Marionette)\n* ----------------------------------\n* v4.0.0\n*\n* Copyright (c)2018 Derick Bailey, Muted Solutions, LLC.\n* Distributed under MIT license\n*\n* http://marionettejs.com\n*/\n\n\n\n\n\n\nvar version = \"4.0.0\";\n\n//Internal utility for creating context style global utils\nvar proxy = function proxy(method) {\n  return function (context) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return method.apply(context, args);\n  };\n};\n\n// Marionette.extend\n// -----------------\n\n// Borrow the Backbone `extend` method so we can use it as needed\nvar extend = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Model.extend;\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nvar normalizeMethods$1 = function normalizeMethods(hash) {\n  var _this = this;\n\n  if (!hash) {\n    return;\n  }\n\n  return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(hash, function (normalizedHash, method, name) {\n    if (!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(method)) {\n      method = _this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\n// Error\n// -----\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number', 'url'];\n\nvar MarionetteError = extend.call(Error, {\n  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n  url: '',\n\n  constructor: function constructor(options) {\n    var error = Error.call(this, options.message);\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(this, underscore__WEBPACK_IMPORTED_MODULE_1___default.a.pick(error, errorProps), underscore__WEBPACK_IMPORTED_MODULE_1___default.a.pick(options, errorProps));\n\n    if (Error.captureStackTrace) {\n      this.captureStackTrace();\n    }\n\n    this.url = this.urlRoot + this.url;\n  },\n  captureStackTrace: function captureStackTrace() {\n    Error.captureStackTrace(this, MarionetteError);\n  },\n  toString: function toString() {\n    return this.name + ': ' + this.message + ' See: ' + this.url;\n  }\n});\n\n// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nfunction normalizeBindings(context, bindings) {\n  if (!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'common.html#bindevents'\n    });\n  }\n\n  return normalizeMethods$1.call(context, bindings);\n}\n\nfunction bindEvents$1(entity, bindings) {\n  if (!entity || !bindings) {\n    return this;\n  }\n\n  this.listenTo(entity, normalizeBindings(this, bindings));\n\n  return this;\n}\n\nfunction unbindEvents$1(entity, bindings) {\n  if (!entity) {\n    return this;\n  }\n\n  if (!bindings) {\n    this.stopListening(entity);\n    return this;\n  }\n\n  this.stopListening(entity, normalizeBindings(this, bindings));\n\n  return this;\n}\n\n// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nfunction normalizeBindings$1(context, bindings) {\n  if (!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'common.html#bindrequests'\n    });\n  }\n\n  return normalizeMethods$1.call(context, bindings);\n}\n\nfunction bindRequests$1(channel, bindings) {\n  if (!channel || !bindings) {\n    return this;\n  }\n\n  channel.reply(normalizeBindings$1(this, bindings), this);\n\n  return this;\n}\n\nfunction unbindRequests$1(channel, bindings) {\n  if (!channel) {\n    return this;\n  }\n\n  if (!bindings) {\n    channel.stopReplying(null, null, this);\n    return this;\n  }\n\n  channel.stopReplying(normalizeBindings$1(this, bindings));\n\n  return this;\n}\n\n// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nvar getOption$1 = function getOption(optionName) {\n  if (!optionName) {\n    return;\n  }\n  if (this.options && this.options[optionName] !== undefined) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\n// Merge `keys` from `options` onto `this`\nvar mergeOptions$1 = function mergeOptions(options, keys) {\n  var _this = this;\n\n  if (!options) {\n    return;\n  }\n\n  underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(keys, function (key) {\n    var option = options[key];\n    if (option !== undefined) {\n      _this[key] = option;\n    }\n  });\n};\n\n// DOM Refresh\n// -----------\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) {\n    return;\n  }\n  underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(view._getImmediateChildren(), function (child) {\n    if (!shouldTrigger(child)) {\n      return;\n    }\n    child.triggerMethod(event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) {\n    return false;\n  }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) {\n    return false;\n  }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    view.triggerMethod('dom:refresh', view);\n  }\n}\n\nfunction triggerDOMRemove(view) {\n  if (view._isAttached && view._isRendered) {\n    view.triggerMethod('dom:remove', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n  triggerDOMRemove(this);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleBeforeRender() {\n  triggerDOMRemove(this);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored || view.monitorViewEvents === false) {\n    return;\n  }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'before:render': handleBeforeRender,\n    'render': handleRender\n  });\n}\n\n// Trigger Method\n// --------------\n\n// split the event name on the \":\"\nvar splitter = /(^|:)(\\w)/gi;\n\n// Only calc getOnMethodName once\nvar methodCache = {};\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nvar getOnMethodName = function getOnMethodName(event) {\n  if (!methodCache[event]) {\n    methodCache[event] = 'on' + event.replace(splitter, getEventName);\n  }\n\n  return methodCache[event];\n};\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nfunction triggerMethod$1(event) {\n  // get the method name from the event name\n  var methodName = getOnMethodName(event);\n  var method = getOption$1.call(this, methodName);\n  var result = void 0;\n\n  // call the onMethodName if it exists\n  if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, underscore__WEBPACK_IMPORTED_MODULE_1___default.a.drop(arguments));\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\nvar Events = {\n  triggerMethod: triggerMethod$1\n};\n\nvar CommonMixin = {\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods$1,\n\n  _setOptions: function _setOptions(options, classOptions) {\n    this.options = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'options'), options);\n    this.mergeOptions(options, classOptions);\n  },\n\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions$1,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption$1,\n\n  // Enable binding view's events from another entity.\n  bindEvents: bindEvents$1,\n\n  // Enable unbinding view's events from another entity.\n  unbindEvents: unbindEvents$1,\n\n  // Enable binding view's requests.\n  bindRequests: bindRequests$1,\n\n  // Enable unbinding view's requests.\n  unbindRequests: unbindRequests$1,\n\n  triggerMethod: triggerMethod$1\n};\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(CommonMixin, backbone__WEBPACK_IMPORTED_MODULE_0___default.a.Events);\n\nvar DestroyMixin = {\n  _isDestroyed: false,\n\n  isDestroyed: function isDestroyed() {\n    return this._isDestroyed;\n  },\n  destroy: function destroy(options) {\n    if (this._isDestroyed) {\n      return this;\n    }\n\n    this.triggerMethod('before:destroy', this, options);\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', this, options);\n    this.stopListening();\n\n    return this;\n  }\n};\n\n// MixinOptions\n// - channelName\n// - radioEvents\n// - radioRequests\n\nvar RadioMixin = {\n  _initRadio: function _initRadio() {\n    var channelName = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'channelName');\n\n    if (!channelName) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!backbone_radio__WEBPACK_IMPORTED_MODULE_2___default.a) {\n      throw new MarionetteError({\n        message: 'The dependency \"backbone.radio\" is missing.',\n        url: 'backbone.radio.html#marionette-integration'\n      });\n    }\n\n    var channel = this._channel = backbone_radio__WEBPACK_IMPORTED_MODULE_2___default.a.channel(channelName);\n\n    var radioEvents = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'radioEvents');\n    this.bindEvents(channel, radioEvents);\n\n    var radioRequests = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'radioRequests');\n    this.bindRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n  _destroyRadio: function _destroyRadio() {\n    this._channel.stopReplying(null, null, this);\n  },\n  getChannel: function getChannel() {\n    return this._channel;\n  }\n};\n\n// Object\n// ------\n\nvar ClassOptions = ['channelName', 'radioEvents', 'radioRequests'];\n\n// Object borrows many conventions and utilities from Backbone.\nvar MarionetteObject = function MarionetteObject(options) {\n  this._setOptions(options, ClassOptions);\n  this.cid = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(MarionetteObject.prototype, CommonMixin, DestroyMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // This is a noop method intended to be overridden\n  initialize: function initialize() {}\n});\n\n// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nvar _invoke = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.invokeMap || underscore__WEBPACK_IMPORTED_MODULE_1___default.a.invoke;\n\n// MixinOptions\n// - behaviors\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise an error is thrown\nfunction getBehaviorClass(options) {\n  if (options.behaviorClass) {\n    return { BehaviorClass: options.behaviorClass, options: options };\n  }\n\n  //treat functions as a Behavior constructor\n  if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(options)) {\n    return { BehaviorClass: options, options: {} };\n  }\n\n  throw new MarionetteError({\n    message: 'Unable to get behavior class. A Behavior constructor should be passed directly or as behaviorClass property of options',\n    url: 'marionette.behavior.html#defining-and-attaching-behaviors'\n  });\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors, allBehaviors) {\n  return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(behaviors, function (reducedBehaviors, behaviorDefiniton) {\n    var _getBehaviorClass = getBehaviorClass(behaviorDefiniton),\n        BehaviorClass = _getBehaviorClass.BehaviorClass,\n        options = _getBehaviorClass.options;\n\n    var behavior = new BehaviorClass(options, view);\n    reducedBehaviors.push(behavior);\n\n    return parseBehaviors(view, underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(behavior, 'behaviors'), reducedBehaviors);\n  }, allBehaviors);\n}\n\nvar BehaviorsMixin = {\n  _initBehaviors: function _initBehaviors() {\n    this._behaviors = parseBehaviors(this, underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'behaviors'), []);\n  },\n  _getBehaviorTriggers: function _getBehaviorTriggers() {\n    var triggers = _invoke(this._behaviors, '_getTriggers');\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(triggers, function (memo, _triggers) {\n      return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(memo, _triggers);\n    }, {});\n  },\n  _getBehaviorEvents: function _getBehaviorEvents() {\n    var events = _invoke(this._behaviors, '_getEvents');\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(events, function (memo, _events) {\n      return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(memo, _events);\n    }, {});\n  },\n\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n  _destroyBehaviors: function _destroyBehaviors(options) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', options);\n  },\n\n\n  // Remove a behavior\n  _removeBehavior: function _removeBehavior(behavior) {\n    // Don't worry about the clean up if the view is destroyed\n    if (this._isDestroyed) {\n      return;\n    }\n\n    // Remove behavior-only triggers and events\n    this.undelegate('.trig' + behavior.cid + ' .' + behavior.cid);\n\n    this._behaviors = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.without(this._behaviors, behavior);\n  },\n  _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n  _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n  _triggerEventOnBehaviors: function _triggerEventOnBehaviors(eventName, view, options) {\n    _invoke(this._behaviors, 'triggerMethod', eventName, view, options);\n  }\n};\n\n// MixinOptions\n// - collectionEvents\n// - modelEvents\n\nvar DelegateEntityEventsMixin = {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n    if (model) {\n      this._modelEvents = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'modelEvents');\n      this.bindEvents(model, this._modelEvents);\n    }\n\n    if (collection) {\n      this._collectionEvents = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'collectionEvents');\n      this.bindEvents(collection, this._collectionEvents);\n    }\n  },\n\n\n  // Remove any previously delegate entity events\n  _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n    if (this._modelEvents) {\n      this.unbindEvents(model, this._modelEvents);\n      delete this._modelEvents;\n    }\n\n    if (this._collectionEvents) {\n      this.unbindEvents(collection, this._collectionEvents);\n      delete this._collectionEvents;\n    }\n  },\n\n\n  // Remove cached event handlers\n  _deleteEntityEventHandlers: function _deleteEntityEventHandlers() {\n    delete this._modelEvents;\n    delete this._collectionEvents;\n  }\n};\n\n// MixinOptions\n// - template\n// - templateContext\n\nvar TemplateRenderMixin = {\n\n  // Internal method to render the template with the serialized data\n  // and template context\n  _renderTemplate: function _renderTemplate(template) {\n    // Add in entity data and template context\n    var data = this.mixinTemplateContext(this.serializeData()) || {};\n\n    // Render and add to el\n    var html = this._renderHtml(template, data);\n    if (typeof html !== 'undefined') {\n      this.attachElContent(html);\n    }\n  },\n\n\n  // Get the template for this view instance.\n  // You can set a `template` attribute in the view definition\n  // or pass a `template: TemplateFunction` parameter in\n  // to the constructor options.\n  getTemplate: function getTemplate() {\n    return this.template;\n  },\n\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext: function mixinTemplateContext(serializedData) {\n    var templateContext = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'templateContext');\n    if (!templateContext) {\n      return serializedData;\n    }\n    if (!serializedData) {\n      return templateContext;\n    }\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, serializedData, templateContext);\n  },\n\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData: function serializeData() {\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    if (this.collection) {\n      return {\n        items: this.serializeCollection()\n      };\n    }\n  },\n\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel: function serializeModel() {\n    return this.model.attributes;\n  },\n\n\n  // Serialize a collection\n  serializeCollection: function serializeCollection() {\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.collection.models, function (model) {\n      return model.attributes;\n    });\n  },\n\n\n  // Renders the data into the template\n  _renderHtml: function _renderHtml(template, data) {\n    return template(data);\n  },\n\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  // }\n  // ```\n  attachElContent: function attachElContent(html) {\n    this.Dom.setContents(this.el, html, this.$el);\n  }\n};\n\n// Borrow event splitter from Backbone\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nvar getNamespacedEventName = function getNamespacedEventName(eventName, namespace) {\n  var match = eventName.match(delegateEventSplitter);\n  return match[1] + \".\" + namespace + \" \" + match[2];\n};\n\n// Add Feature flags here\n// e.g. 'class' => false\nvar FEATURES = {\n  childViewEventPrefix: false,\n  triggersStopPropagation: true,\n  triggersPreventDefault: true,\n  DEV_MODE: false\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isString(triggerDef)) {\n    triggerDef = { event: triggerDef };\n  }\n\n  var eventName = triggerDef.event;\n\n  var shouldPreventDefault = !!triggerDef.preventDefault;\n\n  if (isEnabled('triggersPreventDefault')) {\n    shouldPreventDefault = triggerDef.preventDefault !== false;\n  }\n\n  var shouldStopPropagation = !!triggerDef.stopPropagation;\n\n  if (isEnabled('triggersStopPropagation')) {\n    shouldStopPropagation = triggerDef.stopPropagation !== false;\n  }\n\n  return function (event) {\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      event.stopPropagation();\n    }\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    view.triggerMethod.apply(view, [eventName, view, event].concat(args));\n  };\n}\n\nvar TriggersMixin = {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers: function _getViewTriggers(view, triggers) {\n    var _this = this;\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(triggers, function (events, value, key) {\n      key = getNamespacedEventName(key, 'trig' + _this.cid);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n};\n\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nvar _normalizeUIKeys = function _normalizeUIKeys(hash, ui) {\n  return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(hash, function (memo, val, key) {\n    var normalizedKey = _normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\nvar uiRegEx = /@ui\\.[a-zA-Z-_$0-9]*/g;\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nvar _normalizeUIString = function _normalizeUIString(uiString, ui) {\n  return uiString.replace(uiRegEx, function (r) {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nvar _normalizeUIValues = function _normalizeUIValues(hash, ui, property) {\n  underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(hash, function (val, key) {\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isString(val)) {\n      hash[key] = _normalizeUIString(val, ui);\n    } else if (val) {\n      var propertyVal = val[property];\n      if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isString(propertyVal)) {\n        val[property] = _normalizeUIString(propertyVal, ui);\n      }\n    }\n  });\n  return hash;\n};\n\nvar UIMixin = {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys: function normalizeUIKeys(hash) {\n    var uiBindings = this._getUIBindings();\n    return _normalizeUIKeys(hash, uiBindings);\n  },\n\n\n  // normalize the passed string with the views `ui` selectors.\n  // `\"@ui.bar\"`\n  normalizeUIString: function normalizeUIString(uiString) {\n    var uiBindings = this._getUIBindings();\n    return _normalizeUIString(uiString, uiBindings);\n  },\n\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues: function normalizeUIValues(hash, property) {\n    var uiBindings = this._getUIBindings();\n    return _normalizeUIValues(hash, uiBindings, property);\n  },\n  _getUIBindings: function _getUIBindings() {\n    var uiBindings = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, '_uiBindings');\n    return uiBindings || underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'ui');\n  },\n\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements: function _bindUIElements() {\n    var _this = this;\n\n    if (!this.ui) {\n      return;\n    }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(bindings, function (selector, key) {\n      _this._ui[key] = _this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n  _unbindUIElements: function _unbindUIElements() {\n    var _this2 = this;\n\n    if (!this.ui || !this._uiBindings) {\n      return;\n    }\n\n    // delete all of the existing ui bindings\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(this.ui, function ($el, name) {\n      delete _this2.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n  _getUI: function _getUI(name) {\n    return this._ui[name];\n  }\n};\n\n// DomApi\n//  ---------\n// Performant method for returning the jQuery instance\nfunction _getEl(el) {\n  return el instanceof backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$ ? el : backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$(el);\n}\n\n// Static setter\nfunction setDomApi$1(mixin) {\n  this.prototype.Dom = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, this.prototype.Dom, mixin);\n  return this;\n}\n\nvar DomApi = {\n\n  // Returns a new HTML DOM node instance\n  createBuffer: function createBuffer() {\n    return document.createDocumentFragment();\n  },\n\n\n  // Lookup the `selector` string\n  // Selector may also be a DOM element\n  // Returns an array-like object of nodes\n  getEl: function getEl(selector) {\n    return _getEl(selector);\n  },\n\n\n  // Finds the `selector` string with the el\n  // Returns an array-like object of nodes\n  findEl: function findEl(el, selector) {\n    var _$el = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _getEl(el);\n\n    return _$el.find(selector);\n  },\n\n\n  // Returns true if the el contains the node childEl\n  hasEl: function hasEl(el, childEl) {\n    return el.contains(childEl && childEl.parentNode);\n  },\n\n\n  // Detach `el` from the DOM without removing listeners\n  detachEl: function detachEl(el) {\n    var _$el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _getEl(el);\n\n    _$el.detach();\n  },\n\n\n  // Remove `oldEl` from the DOM and put `newEl` in its place\n  replaceEl: function replaceEl(newEl, oldEl) {\n    if (newEl === oldEl) {\n      return;\n    }\n\n    var parent = oldEl.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(newEl, oldEl);\n  },\n\n\n  // Swaps the location of `el1` and `el2` in the DOM\n  swapEl: function swapEl(el1, el2) {\n    if (el1 === el2) {\n      return;\n    }\n\n    var parent1 = el1.parentNode;\n    var parent2 = el2.parentNode;\n\n    if (!parent1 || !parent2) {\n      return;\n    }\n\n    var next1 = el1.nextSibling;\n    var next2 = el2.nextSibling;\n\n    parent1.insertBefore(el2, next1);\n    parent2.insertBefore(el1, next2);\n  },\n\n\n  // Replace the contents of `el` with the HTML string of `html`\n  setContents: function setContents(el, html) {\n    var _$el = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _getEl(el);\n\n    _$el.html(html);\n  },\n\n\n  // Takes the DOM node `el` and appends the DOM node `contents`\n  // to the end of the element's contents.\n  appendContents: function appendContents(el, contents) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$_$el = _ref._$el,\n        _$el = _ref$_$el === undefined ? _getEl(el) : _ref$_$el,\n        _ref$_$contents = _ref._$contents,\n        _$contents = _ref$_$contents === undefined ? _getEl(contents) : _ref$_$contents;\n\n    _$el.append(_$contents);\n  },\n\n\n  // Does the el have child nodes\n  hasContents: function hasContents(el) {\n    return !!el && el.hasChildNodes();\n  },\n\n\n  // Remove the inner contents of `el` from the DOM while leaving\n  // `el` itself in the DOM.\n  detachContents: function detachContents(el) {\n    var _$el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _getEl(el);\n\n    _$el.contents().detach();\n  }\n};\n\n// ViewMixin\n//  ---------\n\n// MixinOptions\n// - behaviors\n// - childViewEventPrefix\n// - childViewEvents\n// - childViewTriggers\n// - collectionEvents\n// - modelEvents\n// - triggers\n// - ui\n\n\nvar ViewMixin = {\n  Dom: DomApi,\n\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed: function isDestroyed() {\n    return !!this._isDestroyed;\n  },\n\n\n  _isRendered: false,\n\n  isRendered: function isRendered() {\n    return !!this._isRendered;\n  },\n\n\n  _isAttached: false,\n\n  isAttached: function isAttached() {\n    return !!this._isAttached;\n  },\n\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents: function delegateEvents(events) {\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    var combinedEvents = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, this._getBehaviorEvents(), this._getEvents(events), this._getBehaviorTriggers(), this._getTriggers());\n\n    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n\n  // Allows Backbone.View events to utilize `@ui.` selectors\n  _getEvents: function _getEvents(events) {\n    if (events) {\n      return this.normalizeUIKeys(events);\n    }\n\n    if (!this.events) {\n      return;\n    }\n\n    return this.normalizeUIKeys(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'events'));\n  },\n\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getTriggers: function _getTriggers() {\n    if (!this.triggers) {\n      return;\n    }\n\n    // Allow `triggers` to be configured as a function\n    var triggers = this.normalizeUIKeys(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents: function undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n\n  // Handle destroying the view and its children.\n  destroy: function destroy(options) {\n    if (this._isDestroyed) {\n      return this;\n    }\n    var shouldTriggerDetach = this._isAttached && !this._disableDetachEvents;\n\n    this.triggerMethod('before:destroy', this, options);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n\n    // Destroy behaviors after _isDestroyed flag\n    this._destroyBehaviors(options);\n\n    this._deleteEntityEventHandlers();\n\n    this.triggerMethod('destroy', this, options);\n    this._triggerEventOnBehaviors('destroy', this, options);\n\n    this.stopListening();\n\n    return this;\n  },\n\n\n  // Equates to this.$el.remove\n  _removeElement: function _removeElement() {\n    this.$el.off().removeData();\n    this.Dom.detachEl(this.el, this.$el);\n  },\n\n\n  // This method binds the elements specified in the \"ui\" hash\n  bindUIElements: function bindUIElements() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements: function unbindUIElements() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n  getUI: function getUI(name) {\n    return this._getUI(name);\n  },\n\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies: function _buildEventProxies() {\n    this._childViewEvents = this.normalizeMethods(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'childViewEvents'));\n    this._childViewTriggers = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'childViewTriggers');\n    this._eventPrefix = this._getEventPrefix();\n  },\n  _getEventPrefix: function _getEventPrefix() {\n    var defaultPrefix = isEnabled('childViewEventPrefix') ? 'childview' : false;\n    var prefix = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'childViewEventPrefix', defaultPrefix);\n\n    return prefix === false ? prefix : prefix + ':';\n  },\n  _proxyChildViewEvents: function _proxyChildViewEvents(view) {\n    if (this._childViewEvents || this._childViewTriggers || this._eventPrefix) {\n      this.listenTo(view, 'all', this._childViewEventHandler);\n    }\n  },\n  _childViewEventHandler: function _childViewEventHandler(eventName) {\n    var childViewEvents = this._childViewEvents;\n\n    // call collectionView childViewEvent if defined\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (childViewEvents && childViewEvents[eventName]) {\n      childViewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    var childViewTriggers = this._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && childViewTriggers[eventName]) {\n      this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n    }\n\n    if (this._eventPrefix) {\n      this.triggerMethod.apply(this, [this._eventPrefix + eventName].concat(args));\n    }\n  }\n};\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TemplateRenderMixin, TriggersMixin, UIMixin);\n\nfunction renderView(view) {\n  if (view._isRendered) {\n    return;\n  }\n\n  if (!view.supportsRenderLifecycle) {\n    view.triggerMethod('before:render', view);\n  }\n\n  view.render();\n  view._isRendered = true;\n\n  if (!view.supportsRenderLifecycle) {\n    view.triggerMethod('render', view);\n  }\n}\n\nfunction destroyView(view, disableDetachEvents) {\n  if (view.destroy) {\n    // Attach flag for public destroy function internal check\n    view._disableDetachEvents = disableDetachEvents;\n    view.destroy();\n    return;\n  }\n\n  // Destroy for non-Marionette Views\n  if (!view.supportsDestroyLifecycle) {\n    view.triggerMethod('before:destroy', view);\n  }\n\n  var shouldTriggerDetach = view._isAttached && !disableDetachEvents;\n\n  if (shouldTriggerDetach) {\n    view.triggerMethod('before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    view.triggerMethod('detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    view.triggerMethod('destroy', view);\n  }\n}\n\n// Region\n// ------\n\nvar classErrorName = 'RegionError';\n\nvar ClassOptions$2 = ['allowMissingEl', 'parentEl', 'replaceElement'];\n\nvar Region = function Region(options) {\n  this._setOptions(options, ClassOptions$2);\n\n  this.cid = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.uniqueId(this.cidPrefix);\n\n  // getOption necessary because options.el may be passed as undefined\n  this._initEl = this.el = this.getOption('el');\n\n  // Handle when this.el is passed in as a $ wrapped element.\n  this.el = this.el instanceof backbone__WEBPACK_IMPORTED_MODULE_0___default.a.$ ? this.el[0] : this.el;\n\n  if (!this.el) {\n    throw new MarionetteError({\n      name: classErrorName,\n      message: 'An \"el\" must be specified for a region.',\n      url: 'marionette.region.html#additional-options'\n    });\n  }\n\n  this.$el = this.getEl(this.el);\n\n  this.initialize.apply(this, arguments);\n};\n\nRegion.extend = extend;\nRegion.setDomApi = setDomApi$1;\n\n// Region Methods\n// --------------\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(Region.prototype, CommonMixin, {\n  Dom: DomApi,\n\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n  _isSwappingView: false,\n\n  // This is a noop method intended to be overridden\n  initialize: function initialize() {},\n\n\n  // Displays a view instance inside of the region. If necessary handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute.\n  show: function show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n\n    view = this._getView(view, options);\n\n    if (view === this.currentView) {\n      return this;\n    }\n\n    this._isSwappingView = !!this.currentView;\n\n    this.triggerMethod('before:show', this, view, options);\n\n    // Assume an attached view is already in the region for pre-existing DOM\n    if (!view._isAttached) {\n      this.empty(options);\n    }\n\n    this._setupChildView(view);\n\n    this.currentView = view;\n\n    renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n\n    this._isSwappingView = false;\n\n    return this;\n  },\n  _setupChildView: function _setupChildView(view) {\n    monitorViewEvents(view);\n\n    this._proxyChildViewEvents(view);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this._empty, this);\n  },\n  _proxyChildViewEvents: function _proxyChildViewEvents(view) {\n    var parentView = this._parentView;\n\n    if (!parentView) {\n      return;\n    }\n\n    parentView._proxyChildViewEvents(view);\n  },\n\n\n  // If the regions parent view is not monitoring its attach/detach events\n  _shouldDisableMonitoring: function _shouldDisableMonitoring() {\n    return this._parentView && this._parentView.monitorViewEvents === false;\n  },\n  _attachView: function _attachView(view) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var shouldTriggerAttach = !view._isAttached && this.Dom.hasEl(document.documentElement, this.el) && !this._shouldDisableMonitoring();\n    var shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      view.triggerMethod('before:attach', view);\n    }\n\n    if (shouldReplaceEl) {\n      this._replaceEl(view);\n    } else {\n      this.attachHtml(view);\n    }\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      view.triggerMethod('attach', view);\n    }\n  },\n  _ensureElement: function _ensureElement() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n      // Make sure the $el contains only the el\n      this.$el = this.Dom.getEl(this.el);\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      var allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'An \"el\" must exist in DOM for this region ' + this.cid,\n          url: 'marionette.region.html#additional-options'\n        });\n      }\n    }\n    return true;\n  },\n  _getView: function _getView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: classErrorName,\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.',\n        url: 'marionette.region.html#showing-a-view'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: classErrorName,\n        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.',\n        url: 'marionette.region.html#showing-a-view'\n      });\n    }\n\n    if (view instanceof backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View) {\n      return view;\n    }\n\n    var viewOptions = this._getViewOptions(view);\n\n    return new View(viewOptions);\n  },\n\n\n  // This allows for a template or a static string to be\n  // used as a template\n  _getViewOptions: function _getViewOptions(viewOptions) {\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(viewOptions)) {\n      return { template: viewOptions };\n    }\n\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(viewOptions)) {\n      return viewOptions;\n    }\n\n    var template = function template() {\n      return viewOptions;\n    };\n\n    return { template: template };\n  },\n\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl: function getEl(el) {\n    var context = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'parentEl');\n\n    if (context && underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isString(el)) {\n      return this.Dom.findEl(context, el);\n    }\n\n    return this.Dom.getEl(el);\n  },\n  _replaceEl: function _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    view.on('before:destroy', this._restoreEl, this);\n\n    this.Dom.replaceEl(view.el, this.el);\n\n    this._isReplaced = true;\n  },\n\n\n  // Restore the region's element in the DOM.\n  _restoreEl: function _restoreEl() {\n    // There is nothing to replace\n    if (!this._isReplaced) {\n      return;\n    }\n\n    var view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._detachView(view);\n\n    this._isReplaced = false;\n  },\n\n\n  // Check to see if the region's el was replaced.\n  isReplaced: function isReplaced() {\n    return !!this._isReplaced;\n  },\n\n\n  // Check to see if a view is being swapped by another\n  isSwappingView: function isSwappingView() {\n    return !!this._isSwappingView;\n  },\n\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml: function attachHtml(view) {\n    this.Dom.appendContents(this.el, view.el, { _$el: this.$el, _$contents: view.$el });\n  },\n\n\n  // Destroy the current view, if there is one. If there is no current view,\n  // it will detach any html inside the region's `el`.\n  empty: function empty() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { allowMissingEl: true };\n\n    var view = this.currentView;\n\n    // If there is no view in the region we should only detach current html\n    if (!view) {\n      if (this._ensureElement(options)) {\n        this.detachHtml();\n      }\n      return this;\n    }\n\n    this._empty(view, true);\n    return this;\n  },\n  _empty: function _empty(view, shouldDestroy) {\n    view.off('destroy', this._empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    this._restoreEl();\n\n    delete this.currentView;\n\n    if (!view._isDestroyed) {\n      if (shouldDestroy) {\n        this.removeView(view);\n      } else {\n        this._detachView(view);\n      }\n      this._stopChildViewEvents(view);\n    }\n\n    this.triggerMethod('empty', this, view);\n  },\n  _stopChildViewEvents: function _stopChildViewEvents(view) {\n    var parentView = this._parentView;\n\n    if (!parentView) {\n      return;\n    }\n\n    this._parentView.stopListening(view);\n  },\n\n\n  // Non-Marionette safe view.destroy\n  destroyView: function destroyView$$1(view) {\n    if (view._isDestroyed) {\n      return view;\n    }\n\n    destroyView(view, this._shouldDisableMonitoring());\n    return view;\n  },\n\n\n  // Override this method to determine what happens when the view\n  // is removed from the region when the view is not being detached\n  removeView: function removeView(view) {\n    this.destroyView(view);\n  },\n\n\n  // Empties the Region without destroying the view\n  // Returns the detached view\n  detachView: function detachView() {\n    var view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._empty(view);\n\n    return view;\n  },\n  _detachView: function _detachView(view) {\n    var shouldTriggerDetach = view._isAttached && !this._shouldDisableMonitoring();\n    var shouldRestoreEl = this._isReplaced;\n    if (shouldTriggerDetach) {\n      view.triggerMethod('before:detach', view);\n    }\n\n    if (shouldRestoreEl) {\n      this.Dom.replaceEl(this.el, view.el);\n    } else {\n      this.detachHtml();\n    }\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      view.triggerMethod('detach', view);\n    }\n  },\n\n\n  // Override this method to change how the region detaches current content\n  detachHtml: function detachHtml() {\n    this.Dom.detachContents(this.el, this.$el);\n  },\n\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView: function hasView() {\n    return !!this.currentView;\n  },\n\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset: function reset(options) {\n    this.empty(options);\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n\n  _isDestroyed: false,\n\n  isDestroyed: function isDestroyed() {\n    return this._isDestroyed;\n  },\n\n\n  // Destroy the region, remove any child view\n  // and remove the region from any associated view\n  destroy: function destroy(options) {\n    if (this._isDestroyed) {\n      return this;\n    }\n\n    this.triggerMethod('before:destroy', this, options);\n    this._isDestroyed = true;\n\n    this.reset(options);\n\n    if (this._name) {\n      this._parentView._removeReferences(this._name);\n    }\n    delete this._parentView;\n    delete this._name;\n\n    this.triggerMethod('destroy', this, options);\n    this.stopListening();\n\n    return this;\n  }\n});\n\n// return the region instance from the definition\nvar buildRegion = function (definition, defaults) {\n  if (definition instanceof Region) {\n    return definition;\n  }\n\n  if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isString(definition)) {\n    return buildRegionFromObject(defaults, { el: definition });\n  }\n\n  if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(definition)) {\n    return buildRegionFromObject(defaults, { regionClass: definition });\n  }\n\n  if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(definition)) {\n    return buildRegionFromObject(defaults, definition);\n  }\n\n  throw new MarionetteError({\n    message: 'Improper region configuration type.',\n    url: 'marionette.region.html#defining-regions'\n  });\n};\n\nfunction buildRegionFromObject(defaults, definition) {\n  var options = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, defaults, definition);\n\n  var RegionClass = options.regionClass;\n\n  delete options.regionClass;\n\n  return new RegionClass(options);\n}\n\n// MixinOptions\n// - regions\n// - regionClass\n\nvar RegionsMixin = {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions: function _initRegions() {\n\n    // init regions hash\n    this.regions = this.regions || {};\n    this._regions = {};\n\n    this.addRegions(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'regions'));\n  },\n\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions: function _reInitRegions() {\n    _invoke(this._regions, 'reset');\n  },\n\n\n  // Add a single region, by name, to the View\n  addRegion: function addRegion(name, definition) {\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function addRegions(regions) {\n    // If there's nothing to add, stop here.\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, 'el');\n\n    // Add the regions definitions to the regions property\n    this.regions = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n\n  // internal method to build and add regions\n  _addRegions: function _addRegions(regionDefinitions) {\n    var _this = this;\n\n    var defaults = {\n      regionClass: this.regionClass,\n      parentEl: underscore__WEBPACK_IMPORTED_MODULE_1___default.a.partial(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result, this, 'el')\n    };\n\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(regionDefinitions, function (regions, definition, name) {\n      regions[name] = buildRegion(definition, defaults);\n      _this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n  _addRegion: function _addRegion(region, name) {\n    this.triggerMethod('before:add:region', this, name, region);\n\n    region._parentView = this;\n    region._name = name;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', this, name, region);\n  },\n\n\n  // Remove a single region from the View, by name\n  removeRegion: function removeRegion(name) {\n    var region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n\n  // Remove all regions from the View\n  removeRegions: function removeRegions() {\n    var regions = this._getRegions();\n\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(this._regions, this._removeRegion.bind(this));\n\n    return regions;\n  },\n  _removeRegion: function _removeRegion(region, name) {\n    this.triggerMethod('before:remove:region', this, name, region);\n\n    region.destroy();\n\n    this.triggerMethod('remove:region', this, name, region);\n  },\n\n\n  // Called in a region's destroy\n  _removeReferences: function _removeReferences(name) {\n    delete this.regions[name];\n    delete this._regions[name];\n  },\n\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions: function emptyRegions() {\n    var regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion: function hasRegion(name) {\n    return !!this.getRegion(name);\n  },\n\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion: function getRegion(name) {\n    if (!this._isRendered) {\n      this.render();\n    }\n    return this._regions[name];\n  },\n  _getRegions: function _getRegions() {\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.clone(this._regions);\n  },\n\n\n  // Get all regions\n  getRegions: function getRegions() {\n    if (!this._isRendered) {\n      this.render();\n    }\n    return this._getRegions();\n  },\n  showChildView: function showChildView(name, view, options) {\n    var region = this.getRegion(name);\n    region.show(view, options);\n    return view;\n  },\n  detachChildView: function detachChildView(name) {\n    return this.getRegion(name).detachView();\n  },\n  getChildView: function getChildView(name) {\n    return this.getRegion(name).currentView;\n  }\n};\n\n// Static setter for the renderer\nfunction setRenderer$1(renderer) {\n  this.prototype._renderHtml = renderer;\n  return this;\n}\n\n// View\n// ---------\n\nvar ClassOptions$1 = ['behaviors', 'childViewEventPrefix', 'childViewEvents', 'childViewTriggers', 'collectionEvents', 'events', 'modelEvents', 'regionClass', 'regions', 'template', 'templateContext', 'triggers', 'ui'];\n\n// Used by _getImmediateChildren\nfunction childReducer(children, region) {\n  if (region.currentView) {\n    children.push(region.currentView);\n  }\n\n  return children;\n}\n\n// The standard view. Includes view events, automatic rendering\n// templates, nested views, and more.\nvar View = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({\n  constructor: function constructor(options) {\n    this._setOptions(options, ClassOptions$1);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.constructor.apply(this, arguments);\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this, options);\n  },\n\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // rendered or attached on setElement.\n  setElement: function setElement() {\n    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.setElement.apply(this, arguments);\n\n    this._isRendered = this.Dom.hasContents(this.el);\n    this._isAttached = this.Dom.hasEl(document.documentElement, this.el);\n\n    if (this._isRendered) {\n      this.bindUIElements();\n    }\n\n    return this;\n  },\n\n\n  // If a template is available, renders it into the view's `el`\n  // Re-inits regions and binds UI.\n  render: function render() {\n    var template = this.getTemplate();\n\n    if (template === false || this._isDestroyed) {\n      return this;\n    }\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate(template);\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n\n  // called by ViewMixin destroy\n  _removeChildren: function _removeChildren() {\n    this.removeRegions();\n  },\n  _getImmediateChildren: function _getImmediateChildren() {\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(this._regions, childReducer, []);\n  }\n}, {\n  setRenderer: setRenderer$1,\n  setDomApi: setDomApi$1\n});\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(View.prototype, ViewMixin, RegionsMixin);\n\n// Provide a container to store, retrieve and\n// shut down child views.\nvar Container = function Container() {\n  this._init();\n};\n\n// Mix in methods from Underscore, for iteration, and other\n// collection related features.\n// Borrowing this code from Backbone.Collection:\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\nvar methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 'last', 'without', 'isEmpty', 'pluck', 'reduce', 'partition'];\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(methods, function (method) {\n  Container.prototype[method] = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a[method].apply(underscore__WEBPACK_IMPORTED_MODULE_1___default.a, [this._views].concat(args));\n  };\n});\n\nfunction stringComparator(comparator, view) {\n  return view.model && view.model.get(comparator);\n}\n\n// Container Methods\n// -----------------\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(Container.prototype, {\n\n  // Initializes an empty container\n  _init: function _init() {\n    this._views = [];\n    this._viewsByCid = {};\n    this._indexByModel = {};\n    this._updateLength();\n  },\n\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Additionally it stores\n  // the view by index in the _views array\n  _add: function _add(view) {\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._views.length;\n\n    this._addViewIndexes(view);\n\n    // add to end by default\n    this._views.splice(index, 0, view);\n\n    this._updateLength();\n  },\n  _addViewIndexes: function _addViewIndexes(view) {\n    // store the view\n    this._viewsByCid[view.cid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = view;\n    }\n  },\n\n\n  // Sort (mutate) and return the array of the child views.\n  _sort: function _sort(comparator, context) {\n    if (typeof comparator === 'string') {\n      comparator = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.partial(stringComparator, comparator);\n      return this._sortBy(comparator);\n    }\n\n    if (comparator.length === 1) {\n      return this._sortBy(comparator.bind(context));\n    }\n\n    return this._views.sort(comparator.bind(context));\n  },\n\n\n  // Makes `_.sortBy` mutate the array to match `this._views.sort`\n  _sortBy: function _sortBy(comparator) {\n    var sortedViews = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(this._views, comparator);\n\n    this._set(sortedViews);\n\n    return sortedViews;\n  },\n\n\n  // Replace array contents without overwriting the reference.\n  // Should not add/remove views\n  _set: function _set(views, shouldReset) {\n    this._views.length = 0;\n\n    this._views.push.apply(this._views, views.slice(0));\n\n    if (shouldReset) {\n      this._viewsByCid = {};\n      this._indexByModel = {};\n\n      underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(views, this._addViewIndexes.bind(this));\n\n      this._updateLength();\n    }\n  },\n\n\n  // Swap views by index\n  _swap: function _swap(view1, view2) {\n    var view1Index = this.findIndexByView(view1);\n    var view2Index = this.findIndexByView(view2);\n\n    if (view1Index === -1 || view2Index === -1) {\n      return;\n    }\n\n    var swapView = this._views[view1Index];\n    this._views[view1Index] = this._views[view2Index];\n    this._views[view2Index] = swapView;\n  },\n\n\n  // Find a view by the model that was attached to it.\n  // Uses the model's `cid` to find it.\n  findByModel: function findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n\n  // Find a view by the `cid` of the model that was attached to it.\n  findByModelCid: function findByModelCid(modelCid) {\n    return this._indexByModel[modelCid];\n  },\n\n\n  // Find a view by index.\n  findByIndex: function findByIndex(index) {\n    return this._views[index];\n  },\n\n\n  // Find the index of a view instance\n  findIndexByView: function findIndexByView(view) {\n    return this._views.indexOf(view);\n  },\n\n\n  // Retrieve a view by its `cid` directly\n  findByCid: function findByCid(cid) {\n    return this._viewsByCid[cid];\n  },\n  hasView: function hasView(view) {\n    return !!this.findByCid(view.cid);\n  },\n\n\n  // Remove a view and clean up index references.\n  _remove: function _remove(view) {\n    if (!this._viewsByCid[view.cid]) {\n      return;\n    }\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // remove the view from the container\n    delete this._viewsByCid[view.cid];\n\n    var index = this.findIndexByView(view);\n    this._views.splice(index, 1);\n\n    this._updateLength();\n  },\n\n\n  // Update the `.length` attribute on this container\n  _updateLength: function _updateLength() {\n    this.length = this._views.length;\n  }\n});\n\n// Collection View\n// ---------------\n\nvar classErrorName$1 = 'CollectionViewError';\n\nvar ClassOptions$3 = ['behaviors', 'childView', 'childViewContainer', 'childViewEventPrefix', 'childViewEvents', 'childViewOptions', 'childViewTriggers', 'collectionEvents', 'emptyView', 'emptyViewOptions', 'events', 'modelEvents', 'sortWithCollection', 'template', 'templateContext', 'triggers', 'ui', 'viewComparator', 'viewFilter'];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nvar CollectionView = backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.extend({\n  // flag for maintaining the sorted order of the collection\n  sortWithCollection: true,\n\n  // constructor\n  constructor: function constructor(options) {\n    this._setOptions(options, ClassOptions$3);\n\n    monitorViewEvents(this);\n\n    this._initChildViewStorage();\n    this._initBehaviors();\n\n    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.constructor.apply(this, arguments);\n\n    // Init empty region\n    this.getEmptyRegion();\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this, options);\n  },\n\n\n  // Internal method to set up the `children` object for storing all of the child views\n  // `_children` represents all child views\n  // `children` represents only views filtered to be shown\n  _initChildViewStorage: function _initChildViewStorage() {\n    this._children = new Container();\n    this.children = new Container();\n  },\n\n\n  // Create an region to show the emptyView\n  getEmptyRegion: function getEmptyRegion() {\n    if (this._emptyRegion && !this._emptyRegion.isDestroyed()) {\n      return this._emptyRegion;\n    }\n\n    this._emptyRegion = new Region({ el: this.el, replaceElement: false });\n\n    this._emptyRegion._parentView = this;\n\n    return this._emptyRegion;\n  },\n\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents: function _initialEvents() {\n    if (this._isRendered) {\n      return;\n    }\n\n    this.listenTo(this.collection, {\n      'sort': this._onCollectionSort,\n      'reset': this._onCollectionReset,\n      'update': this._onCollectionUpdate\n    });\n  },\n\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will re-sort.\n  _onCollectionSort: function _onCollectionSort(collection, _ref) {\n    var add = _ref.add,\n        merge = _ref.merge,\n        remove = _ref.remove;\n\n    if (!this.sortWithCollection || this.viewComparator === false) {\n      return;\n    }\n\n    // If the data is changing we will handle the sort later in `_onCollectionUpdate`\n    if (add || remove || merge) {\n      return;\n    }\n\n    // If the only thing happening here is sorting, sort.\n    this.sort();\n  },\n  _onCollectionReset: function _onCollectionReset() {\n    this._destroyChildren();\n\n    this._addChildModels(this.collection.models);\n\n    this.sort();\n  },\n\n\n  // Handle collection update model additions and  removals\n  _onCollectionUpdate: function _onCollectionUpdate(collection, options) {\n    var changes = options.changes;\n\n    // Remove first since it'll be a shorter array lookup.\n    var removedViews = changes.removed.length && this._removeChildModels(changes.removed);\n\n    this._addedViews = changes.added.length && this._addChildModels(changes.added);\n\n    this._detachChildren(removedViews);\n\n    this.sort();\n\n    // Destroy removed child views after all of the render is complete\n    this._removeChildViews(removedViews);\n  },\n  _removeChildModels: function _removeChildModels(models) {\n    var _this = this;\n\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(models, function (views, model) {\n      var removeView = _this._removeChildModel(model);\n\n      if (removeView) {\n        views.push(removeView);\n      }\n\n      return views;\n    }, []);\n  },\n  _removeChildModel: function _removeChildModel(model) {\n    var view = this._children.findByModel(model);\n\n    if (view) {\n      this._removeChild(view);\n    }\n\n    return view;\n  },\n  _removeChild: function _removeChild(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n    this._children._remove(view);\n\n    this.triggerMethod('remove:child', this, view);\n  },\n\n\n  // Added views are returned for consistency with _removeChildModels\n  _addChildModels: function _addChildModels(models) {\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.map(models, this._addChildModel.bind(this));\n  },\n  _addChildModel: function _addChildModel(model) {\n    var view = this._createChildView(model);\n\n    this._addChild(view);\n\n    return view;\n  },\n  _createChildView: function _createChildView(model) {\n    var ChildView = this._getChildView(model);\n    var childViewOptions = this._getChildViewOptions(model);\n    var view = this.buildChildView(model, ChildView, childViewOptions);\n\n    return view;\n  },\n  _addChild: function _addChild(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n\n    this._setupChildView(view);\n    this._children._add(view, index);\n    this.children._add(view, index);\n\n    this.triggerMethod('add:child', this, view);\n  },\n\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView: function _getChildView(child) {\n    var childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: classErrorName$1,\n        message: 'A \"childView\" must be specified',\n        url: 'marionette.collectionview.html#collectionviews-childview'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: classErrorName$1,\n        message: '\"childView\" must be a view class or a function that returns a view class',\n        url: 'marionette.collectionview.html#collectionviews-childview'\n      });\n    }\n\n    return childView;\n  },\n\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView: function _getView(view, child) {\n    if (view.prototype instanceof backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View || view === backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View) {\n      return view;\n    } else if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n  _getChildViewOptions: function _getChildViewOptions(child) {\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child);\n    }\n\n    return this.childViewOptions;\n  },\n\n\n  // Build a `childView` for a model in the collection.\n  // Override to customize the build\n  buildChildView: function buildChildView(child, ChildViewClass, childViewOptions) {\n    var options = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({ model: child }, childViewOptions);\n    return new ChildViewClass(options);\n  },\n  _setupChildView: function _setupChildView(view) {\n    monitorViewEvents(view);\n\n    // We need to listen for if a view is destroyed in a way other\n    // than through the CollectionView.\n    // If this happens we need to remove the reference to the view\n    // since once a view has been destroyed we can not reuse it.\n    view.on('destroy', this.removeChildView, this);\n\n    // set up the child view event forwarding\n    this._proxyChildViewEvents(view);\n  },\n\n\n  // used by ViewMixin's `_childViewEventHandler`\n  _getImmediateChildren: function _getImmediateChildren() {\n    return this.children._views;\n  },\n\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement: function setElement() {\n    backbone__WEBPACK_IMPORTED_MODULE_0___default.a.View.prototype.setElement.apply(this, arguments);\n\n    this._isAttached = this.Dom.hasEl(document.documentElement, this.el);\n\n    return this;\n  },\n\n\n  // Render children views.\n  render: function render() {\n    if (this._isDestroyed) {\n      return this;\n    }\n    this.triggerMethod('before:render', this);\n\n    this._destroyChildren();\n\n    if (this.collection) {\n      this._addChildModels(this.collection.models);\n      this._initialEvents();\n    }\n\n    var template = this.getTemplate();\n\n    if (template) {\n      this._renderTemplate(template);\n      this.bindUIElements();\n    }\n    this._getChildViewContainer();\n    this.sort();\n\n    this._isRendered = true;\n\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n\n  // Get a container within the template to add the children within\n  _getChildViewContainer: function _getChildViewContainer() {\n    var childViewContainer = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'childViewContainer');\n    this.$container = childViewContainer ? this.$(childViewContainer) : this.$el;\n\n    if (!this.$container.length) {\n      throw new MarionetteError({\n        name: classErrorName$1,\n        message: 'The specified \"childViewContainer\" was not found: ' + childViewContainer,\n        url: 'marionette.collectionview.html#defining-the-childviewcontainer'\n      });\n    }\n  },\n\n\n  // Sorts the children then filters and renders the results.\n  sort: function sort() {\n    this._sortChildren();\n\n    this.filter();\n\n    return this;\n  },\n\n\n  // Sorts views by viewComparator and sets the children to the new order\n  _sortChildren: function _sortChildren() {\n    if (!this._children.length) {\n      return;\n    }\n\n    var viewComparator = this.getComparator();\n\n    if (!viewComparator) {\n      return;\n    }\n\n    // If children are sorted prevent added to end perf\n    delete this._addedViews;\n\n    this.triggerMethod('before:sort', this);\n\n    this._children._sort(viewComparator, this);\n\n    this.triggerMethod('sort', this);\n  },\n\n\n  // Sets the view's `viewComparator` and applies the sort if the view is ready.\n  // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n  setComparator: function setComparator(comparator) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        preventRender = _ref2.preventRender;\n\n    var comparatorChanged = this.viewComparator !== comparator;\n    var shouldSort = comparatorChanged && !preventRender;\n\n    this.viewComparator = comparator;\n\n    if (shouldSort) {\n      this.sort();\n    }\n\n    return this;\n  },\n\n\n  // Clears the `viewComparator` and follows the same rules for rendering as `setComparator`.\n  removeComparator: function removeComparator(options) {\n    return this.setComparator(null, options);\n  },\n\n\n  // If viewComparator is overriden it will be returned here.\n  // Additionally override this function to provide custom\n  // viewComparator logic\n  getComparator: function getComparator() {\n    if (this.viewComparator) {\n      return this.viewComparator;\n    }\n\n    if (!this.sortWithCollection || this.viewComparator === false || !this.collection) {\n      return false;\n    }\n\n    return this._viewComparator;\n  },\n\n\n  // Default internal view comparator that order the views by\n  // the order of the collection\n  _viewComparator: function _viewComparator(view) {\n    return this.collection.indexOf(view.model);\n  },\n\n\n  // This method filters the children views and renders the results\n  filter: function filter() {\n    if (this._isDestroyed) {\n      return this;\n    }\n\n    this._filterChildren();\n\n    this._renderChildren();\n\n    return this;\n  },\n  _filterChildren: function _filterChildren() {\n    var _this2 = this;\n\n    if (!this._children.length) {\n      return;\n    }\n\n    var viewFilter = this._getFilter();\n\n    if (!viewFilter) {\n      var shouldReset = this.children.length !== this._children.length;\n\n      this.children._set(this._children._views, shouldReset);\n\n      return;\n    }\n\n    // If children are filtered prevent added to end perf\n    delete this._addedViews;\n\n    this.triggerMethod('before:filter', this);\n\n    var attachViews = [];\n    var detachViews = [];\n\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(this._children._views, function (view, key, children) {\n      (viewFilter.call(_this2, view, key, children) ? attachViews : detachViews).push(view);\n    });\n\n    this._detachChildren(detachViews);\n\n    // reset children\n    this.children._set(attachViews, true);\n\n    this.triggerMethod('filter', this, attachViews, detachViews);\n  },\n\n\n  // This method returns a function for the viewFilter\n  _getFilter: function _getFilter() {\n    var viewFilter = this.getFilter();\n\n    if (!viewFilter) {\n      return false;\n    }\n\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(viewFilter)) {\n      return viewFilter;\n    }\n\n    // Support filter predicates `{ fooFlag: true }`\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(viewFilter)) {\n      var matcher = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.matches(viewFilter);\n      return function (view) {\n        return matcher(view.model && view.model.attributes);\n      };\n    }\n\n    // Filter by model attribute\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isString(viewFilter)) {\n      return function (view) {\n        return view.model && view.model.get(viewFilter);\n      };\n    }\n\n    throw new MarionetteError({\n      name: classErrorName$1,\n      message: '\"viewFilter\" must be a function, predicate object literal, a string indicating a model attribute, or falsy',\n      url: 'marionette.collectionview.html#defining-the-viewfilter'\n    });\n  },\n\n\n  // Override this function to provide custom\n  // viewFilter logic\n  getFilter: function getFilter() {\n    return this.viewFilter;\n  },\n\n\n  // Sets the view's `viewFilter` and applies the filter if the view is ready.\n  // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n  setFilter: function setFilter(filter) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        preventRender = _ref3.preventRender;\n\n    var filterChanged = this.viewFilter !== filter;\n    var shouldRender = filterChanged && !preventRender;\n\n    this.viewFilter = filter;\n\n    if (shouldRender) {\n      this.filter();\n    }\n\n    return this;\n  },\n\n\n  // Clears the `viewFilter` and follows the same rules for rendering as `setFilter`.\n  removeFilter: function removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n  _detachChildren: function _detachChildren(detachingViews) {\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(detachingViews, this._detachChildView.bind(this));\n  },\n  _detachChildView: function _detachChildView(view) {\n    var shouldTriggerDetach = view._isAttached && this.monitorViewEvents !== false;\n    if (shouldTriggerDetach) {\n      view.triggerMethod('before:detach', view);\n    }\n\n    this.detachHtml(view);\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      view.triggerMethod('detach', view);\n    }\n  },\n\n\n  // Override this method to change how the collectionView detaches a child view\n  detachHtml: function detachHtml(view) {\n    this.Dom.detachEl(view.el, view.$el);\n  },\n  _renderChildren: function _renderChildren() {\n    var views = this._addedViews || this.children._views;\n\n    this.triggerMethod('before:render:children', this, views);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    } else {\n      this._destroyEmptyView();\n\n      var els = this._getBuffer(views);\n\n      this._attachChildren(els, views);\n    }\n\n    delete this._addedViews;\n\n    this.triggerMethod('render:children', this, views);\n  },\n\n\n  // Renders each view and creates a fragment buffer from them\n  _getBuffer: function _getBuffer(views) {\n    var _this3 = this;\n\n    var elBuffer = this.Dom.createBuffer();\n\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(views, function (view) {\n      renderView(view);\n      _this3.Dom.appendContents(elBuffer, view.el, { _$contents: view.$el });\n    });\n\n    return elBuffer;\n  },\n  _attachChildren: function _attachChildren(els, views) {\n    var shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n\n    views = shouldTriggerAttach ? views : [];\n\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(views, function (view) {\n      if (view._isAttached) {\n        return;\n      }\n      view.triggerMethod('before:attach', view);\n    });\n\n    this.attachHtml(els, this.$container);\n\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(views, function (view) {\n      if (view._isAttached) {\n        return;\n      }\n      view._isAttached = true;\n      view.triggerMethod('attach', view);\n    });\n  },\n\n\n  // Override this method to do something other than `.append`.\n  // You can attach any HTML at this point including the els.\n  attachHtml: function attachHtml(els, $container) {\n    this.Dom.appendContents($container[0], els, { _$el: $container });\n  },\n  isEmpty: function isEmpty() {\n    return !this.children.length;\n  },\n  _showEmptyView: function _showEmptyView() {\n    var EmptyView = this._getEmptyView();\n\n    if (!EmptyView) {\n      return;\n    }\n\n    var options = this._getEmptyViewOptions();\n\n    var emptyRegion = this.getEmptyRegion();\n\n    emptyRegion.show(new EmptyView(options));\n  },\n\n\n  // Retrieve the empty view class\n  _getEmptyView: function _getEmptyView() {\n    var emptyView = this.emptyView;\n\n    if (!emptyView) {\n      return;\n    }\n\n    return this._getView(emptyView);\n  },\n\n\n  // Remove the emptyView\n  _destroyEmptyView: function _destroyEmptyView() {\n    var emptyRegion = this.getEmptyRegion();\n    // Only empty if a view is show so the region\n    // doesn't detach any other unrelated HTML\n    if (emptyRegion.hasView()) {\n      emptyRegion.empty();\n    }\n  },\n\n\n  //\n  _getEmptyViewOptions: function _getEmptyViewOptions() {\n    var emptyViewOptions = this.emptyViewOptions || this.childViewOptions;\n\n    if (underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(emptyViewOptions)) {\n      return emptyViewOptions.call(this);\n    }\n\n    return emptyViewOptions;\n  },\n  swapChildViews: function swapChildViews(view1, view2) {\n    if (!this._children.hasView(view1) || !this._children.hasView(view2)) {\n      throw new MarionetteError({\n        name: classErrorName$1,\n        message: 'Both views must be children of the collection view to swap.',\n        url: 'marionette.collectionview.html#swapping-child-views'\n      });\n    }\n\n    this._children._swap(view1, view2);\n    this.Dom.swapEl(view1.el, view2.el);\n\n    // If the views are not filtered the same, refilter\n    if (this.children.hasView(view1) !== this.children.hasView(view2)) {\n      this.filter();\n    } else {\n      this.children._swap(view1, view2);\n    }\n\n    return this;\n  },\n\n\n  // Render the child's view and add it to the HTML for the collection view at a given index, based on the current sort\n  addChildView: function addChildView(view, index) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    if (!this._isRendered) {\n      this.render();\n    }\n\n    var hasIndex = typeof index !== 'undefined';\n\n    // Only cache views if added to the end\n    if (!hasIndex || index >= this._children.length) {\n      this._addedViews = [view];\n    }\n    this._addChild(view, index);\n\n    if (hasIndex) {\n      this._renderChildren();\n    } else {\n      this.sort();\n    }\n\n    return view;\n  },\n\n\n  // Detach a view from the children.  Best used when adding a\n  // childView from `addChildView`\n  detachChildView: function detachChildView(view) {\n    this.removeChildView(view, { shouldDetach: true });\n\n    return view;\n  },\n\n\n  // Remove the child view and destroy it.  Best used when adding a\n  // childView from `addChildView`\n  // The options argument is for internal use only\n  removeChildView: function removeChildView(view, options) {\n    if (!view) {\n      return view;\n    }\n\n    this._removeChildView(view, options);\n\n    this._removeChild(view);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n\n    return view;\n  },\n  _removeChildViews: function _removeChildViews(views) {\n    underscore__WEBPACK_IMPORTED_MODULE_1___default.a.each(views, this._removeChildView.bind(this));\n  },\n  _removeChildView: function _removeChildView(view) {\n    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        shouldDetach = _ref4.shouldDetach;\n\n    view.off('destroy', this.removeChildView, this);\n\n    if (shouldDetach) {\n      this._detachChildView(view);\n    } else {\n      this._destroyChildView(view);\n    }\n\n    this.stopListening(view);\n  },\n  _destroyChildView: function _destroyChildView(view) {\n    if (view._isDestroyed) {\n      return;\n    }\n\n    var shouldDisableEvents = this.monitorViewEvents === false;\n    destroyView(view, shouldDisableEvents);\n  },\n\n\n  // called by ViewMixin destroy\n  _removeChildren: function _removeChildren() {\n    this._destroyChildren();\n    var emptyRegion = this.getEmptyRegion();\n    emptyRegion.destroy();\n    delete this._addedViews;\n  },\n\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren: function _destroyChildren() {\n    if (!this._children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    if (this.monitorViewEvents === false) {\n      this.Dom.detachContents(this.el, this.$el);\n    }\n\n    this._removeChildViews(this._children._views);\n\n    // After all children have been destroyed re-init the container\n    this._children._init();\n    this.children._init();\n\n    this.triggerMethod('destroy:children', this);\n  }\n}, {\n  setDomApi: setDomApi$1,\n  setRenderer: setRenderer$1\n});\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(CollectionView.prototype, ViewMixin);\n\n// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nvar ClassOptions$4 = ['collectionEvents', 'events', 'modelEvents', 'triggers', 'ui'];\n\nvar Behavior = function Behavior(options, view) {\n  // Setup reference to the view.\n  // this comes in handle when a behavior\n  // wants to directly talk up the chain\n  // to the view.\n  this.view = view;\n\n  this._setOptions(options, ClassOptions$4);\n  this.cid = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.uniqueId(this.cidPrefix);\n\n  // Construct an internal UI hash using the behaviors UI\n  // hash combined and overridden by the view UI hash.\n  // This allows the user to use UI hash elements defined\n  // in the parent view as well as those defined in the behavior.\n  // This order will help the reuse and share of a behavior\n  // between multiple views, while letting a view override\n  // a selector under an UI key.\n  this.ui = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'ui'), underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(view, 'ui'));\n\n  // Proxy view triggers\n  this.listenTo(view, 'all', this.triggerMethod);\n\n  this.initialize.apply(this, arguments);\n};\n\nBehavior.extend = extend;\n\n// Behavior Methods\n// --------------\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(Behavior.prototype, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin, {\n  cidPrefix: 'mnb',\n\n  // This is a noop method intended to be overridden\n  initialize: function initialize() {},\n\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $: function $() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n\n  // Stops the behavior from listening to events.\n  destroy: function destroy() {\n    this.stopListening();\n\n    this.view._removeBehavior(this);\n\n    this._deleteEntityEventHandlers();\n\n    return this;\n  },\n  proxyViewProperties: function proxyViewProperties() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n  bindUIElements: function bindUIElements() {\n    this._bindUIElements();\n\n    return this;\n  },\n  unbindUIElements: function unbindUIElements() {\n    this._unbindUIElements();\n\n    return this;\n  },\n  getUI: function getUI(name) {\n    return this._getUI(name);\n  },\n\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function delegateEntityEvents() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n  undelegateEntityEvents: function undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n  _getEvents: function _getEvents() {\n    var _this = this;\n\n    if (!this.events) {\n      return;\n    }\n\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorEvents = this.normalizeUIKeys(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return underscore__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n      if (!underscore__WEBPACK_IMPORTED_MODULE_1___default.a.isFunction(behaviorHandler)) {\n        behaviorHandler = _this[behaviorHandler];\n      }\n      if (!behaviorHandler) {\n        return events;\n      }\n      key = getNamespacedEventName(key, _this.cid);\n      events[key] = behaviorHandler.bind(_this);\n      return events;\n    }, {});\n  },\n\n\n  // Internal method to build all trigger handlers for a given behavior\n  _getTriggers: function _getTriggers() {\n    if (!this.triggers) {\n      return;\n    }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorTriggers = this.normalizeUIKeys(underscore__WEBPACK_IMPORTED_MODULE_1___default.a.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n});\n\n// Application\n// -----------\n\nvar ClassOptions$5 = ['channelName', 'radioEvents', 'radioRequests', 'region', 'regionClass'];\n\nvar Application = function Application(options) {\n  this._setOptions(options, ClassOptions$5);\n  this.cid = underscore__WEBPACK_IMPORTED_MODULE_1___default.a.uniqueId(this.cidPrefix);\n  this._initRegion();\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nApplication.extend = extend;\n\n// Application Methods\n// --------------\n\nunderscore__WEBPACK_IMPORTED_MODULE_1___default.a.extend(Application.prototype, CommonMixin, DestroyMixin, RadioMixin, {\n  cidPrefix: 'mna',\n\n  // This is a noop method intended to be overridden\n  initialize: function initialize() {},\n\n\n  // Kick off all of the application's processes.\n  start: function start(options) {\n    this.triggerMethod('before:start', this, options);\n    this.triggerMethod('start', this, options);\n    return this;\n  },\n\n\n  regionClass: Region,\n\n  _initRegion: function _initRegion() {\n    var region = this.region;\n\n    if (!region) {\n      return;\n    }\n\n    var defaults = {\n      regionClass: this.regionClass\n    };\n\n    this._region = buildRegion(region, defaults);\n  },\n  getRegion: function getRegion() {\n    return this._region;\n  },\n  showView: function showView(view) {\n    var region = this.getRegion();\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    region.show.apply(region, [view].concat(args));\n    return view;\n  },\n  getView: function getView() {\n    return this.getRegion().currentView;\n  }\n});\n\n// Utilities\n\nvar bindEvents = proxy(bindEvents$1);\nvar unbindEvents = proxy(unbindEvents$1);\nvar bindRequests = proxy(bindRequests$1);\nvar unbindRequests = proxy(unbindRequests$1);\nvar mergeOptions = proxy(mergeOptions$1);\nvar getOption = proxy(getOption$1);\nvar normalizeMethods = proxy(normalizeMethods$1);\nvar triggerMethod$$1 = proxy(triggerMethod$1);\n\n// Configuration\n\nvar setDomApi = function setDomApi(mixin) {\n  CollectionView.setDomApi(mixin);\n  Region.setDomApi(mixin);\n  View.setDomApi(mixin);\n};\nvar setRenderer = function setRenderer(renderer) {\n  CollectionView.setRenderer(renderer);\n  View.setRenderer(renderer);\n};\n\nvar backbone_marionette = {\n  View: View,\n  CollectionView: CollectionView,\n  MnObject: MarionetteObject,\n  Object: MarionetteObject,\n  Region: Region,\n  Behavior: Behavior,\n  Application: Application,\n  isEnabled: isEnabled,\n  setEnabled: setEnabled,\n  monitorViewEvents: monitorViewEvents,\n  Events: Events,\n  extend: extend,\n  DomApi: DomApi,\n  VERSION: version\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (backbone_marionette);\n//# sourceMappingURL=backbone.marionette.esm.js.map\n\n\n//# sourceURL=webpack:///./node_modules/backbone.marionette/lib/backbone.marionette.esm.js?");

/***/ }),

/***/ "./node_modules/some-lib/src/bar-module/bar-alpha.js":
/*!***********************************************************!*\
  !*** ./node_modules/some-lib/src/bar-module/bar-alpha.js ***!
  \***********************************************************/
/*! exports provided: barAlpha */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"barAlpha\", function() { return barAlpha; });\n/* harmony import */ var _foo_module_foo_beta_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../foo-module/foo-beta.js */ \"./node_modules/some-lib/src/foo-module/foo-beta.js\");\n\r\nfunction barAlpha() {\r\n\tconsole.log('barAlpha');\r\n\tconsole.log('fooBeta is ', typeof _foo_module_foo_beta_js__WEBPACK_IMPORTED_MODULE_0__[\"fooBeta\"]);\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/some-lib/src/bar-module/bar-alpha.js?");

/***/ }),

/***/ "./node_modules/some-lib/src/bar-module/bar-beta.js":
/*!**********************************************************!*\
  !*** ./node_modules/some-lib/src/bar-module/bar-beta.js ***!
  \**********************************************************/
/*! exports provided: barBeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"barBeta\", function() { return barBeta; });\n/* harmony import */ var _bar_alpha_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bar-alpha.js */ \"./node_modules/some-lib/src/bar-module/bar-alpha.js\");\n\r\nfunction barBeta() {\r\n\tconsole.log('barBeta');\r\n\tconsole.log('barAlpha is ', typeof _bar_alpha_js__WEBPACK_IMPORTED_MODULE_0__[\"barAlpha\"]);\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/some-lib/src/bar-module/bar-beta.js?");

/***/ }),

/***/ "./node_modules/some-lib/src/bar-module/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/some-lib/src/bar-module/index.js ***!
  \*******************************************************/
/*! exports provided: barAlpha, barBeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bar_alpha_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bar-alpha.js */ \"./node_modules/some-lib/src/bar-module/bar-alpha.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"barAlpha\", function() { return _bar_alpha_js__WEBPACK_IMPORTED_MODULE_0__[\"barAlpha\"]; });\n\n/* harmony import */ var _bar_beta_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bar-beta.js */ \"./node_modules/some-lib/src/bar-module/bar-beta.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"barBeta\", function() { return _bar_beta_js__WEBPACK_IMPORTED_MODULE_1__[\"barBeta\"]; });\n\n\r\n\r\n\n\n//# sourceURL=webpack:///./node_modules/some-lib/src/bar-module/index.js?");

/***/ }),

/***/ "./node_modules/some-lib/src/foo-module/foo-beta.js":
/*!**********************************************************!*\
  !*** ./node_modules/some-lib/src/foo-module/foo-beta.js ***!
  \**********************************************************/
/*! exports provided: fooBeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fooBeta\", function() { return fooBeta; });\n/* harmony import */ var _bar_module_bar_beta_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bar-module/bar-beta.js */ \"./node_modules/some-lib/src/bar-module/bar-beta.js\");\n\r\nfunction fooBeta() {\r\n\tconsole.log('fooBeta');\r\n\tconsole.log('barBeta is ', typeof _bar_module_bar_beta_js__WEBPACK_IMPORTED_MODULE_0__[\"barBeta\"]);\r\n}\r\n\n\n//# sourceURL=webpack:///./node_modules/some-lib/src/foo-module/foo-beta.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var some_lib_src_bar_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! some-lib/src/bar-module */ \"./node_modules/some-lib/src/bar-module/index.js\");\n/* harmony import */ var backbone_marionette__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! backbone.marionette */ \"./node_modules/backbone.marionette/lib/backbone.marionette.esm.js\");\n\r\n\r\n\r\nconsole.log('barBeta: ', some_lib_src_bar_module__WEBPACK_IMPORTED_MODULE_0__[\"barBeta\"]);\r\n\r\nif (typeof some_lib_src_bar_module__WEBPACK_IMPORTED_MODULE_0__[\"barBeta\"] === 'function') {\r\n\tObject(some_lib_src_bar_module__WEBPACK_IMPORTED_MODULE_0__[\"barBeta\"])();\r\n}\r\n\r\nconst myobj = new backbone_marionette__WEBPACK_IMPORTED_MODULE_1__[\"MnObject\"]();\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "backbone":
/*!***************************!*\
  !*** external "Backbone" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Backbone;\n\n//# sourceURL=webpack:///external_%22Backbone%22?");

/***/ }),

/***/ "backbone.radio":
/*!************************!*\
  !*** external "Radio" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Radio;\n\n//# sourceURL=webpack:///external_%22Radio%22?");

/***/ }),

/***/ "underscore":
/*!********************!*\
  !*** external "_" ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = _;\n\n//# sourceURL=webpack:///external_%22_%22?");

/***/ })

/******/ });